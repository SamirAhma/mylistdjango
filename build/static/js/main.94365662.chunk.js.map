{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","todoList","activeItem","id","title","completed","editing","fetchTasks","bind","handleChange","handleSubmit","getCookie","startEdit","deleteItem","strikeUnstrike","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","this","console","log","fetch","then","response","json","data","setState","e","target","value","preventDefault","csrftoken","url","method","headers","body","JSON","stringify","catch","error","task","tasks","self","className","onSubmit","style","flex","type","placeholder","onChange","map","index","key","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.94365662.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todoList: [],\n      activeItem: {\n        id: null,\n        title: \"\",\n        completed: false,\n      },\n      editing: false,\n    };\n\n    this.fetchTasks = this.fetchTasks.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.getCookie = this.getCookie.bind(this)\n    this.startEdit = this.startEdit.bind(this)\n    this.deleteItem = this.deleteItem.bind(this)\n    this.strikeUnstrike = this.strikeUnstrike.bind(this)\n  }\n\ngetCookie(name) {\n    var cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        var cookies = document.cookie.split(';');\n        for (var i = 0; i < cookies.length; i++) {\n            var cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\n\n\ncomponentDidMount(){\n\n  this.fetchTasks()\n\n}\n\nfetchTasks(){\n   console.log('Fetching...') \n   fetch('https://mylistdjango.herokuapp.com/api/task-list/')\n   .then(response=> response.json())\n   .then(data=>\n    this.setState({\n      todoList:data\n    })\n    )\n}\n\nhandleChange(e){\n  var name = e.target.name\n  var value = e.target.value\n  console.log('Name:', name)\n  console.log('Value:', value)\n  this.setState({\n    activeItem:{\n      ...this.state.activeItem,\n      title:value\n    }\n  })\n}\n\nhandleSubmit(e){\n  e.preventDefault()\n  console.log('ITEM' ,this.state.activeItem)\n  var csrftoken = this.getCookie('csrftoken');\n  var url ='https://mylistdjango.herokuapp.com/api/task-create/'\n\n  if(this.state.editing == true){\n    url = `https://mylistdjango.herokuapp.com/api/task-update/${this.state.activeItem.id}/`\n    this.setState({\n      editing:false\n    })\n  }\n\n\n  fetch(url, {\n    method:\"POST\",\n    headers:{\n      'Content-type':'application/json',\n      'X-CSRFToken':csrftoken\n\n    },\n    body:JSON.stringify(this.state.activeItem)\n  }).then(() =>{\n    this.fetchTasks()\n    this.setState({\n      activeItem: {\n        id: null,\n        title: \"\",\n        completed: false,\n      }\n    })\n  }\n    \n  ).catch(function(error){\n    console.log('ERROR:',error)\n  })\n}\n\nstartEdit(task){\n  this.setState({\n    activeItem:task,\n    editing:true,\n  })\n\n}\n\n\n\ndeleteItem(task){\n  var csrftoken = this.getCookie('csrftoken');\n  fetch(`https://mylistdjango.herokuapp.com/api/task-delete/${task.id}/`, {\n    method:'DELETE',\n    headers:{\n      'Content-type':'application/json',\n      'X-CSRFToken':csrftoken\n    }\n  }).then((response)=>{\n    this.fetchTasks()\n  })\n}\n\n\nstrikeUnstrike(task){\n  task.completed = !task.completed\n  var csrftoken = this.getCookie('csrftoken');\n  console.log('TASK', task.completed)\n  var url = `https://mylistdjango.herokuapp.com/api/task-update/${task.id}/`\n\n  fetch(url,{\n    method:'POST',\n    headers:{\n      'Content-type':'application/json',\n      'X-CSRFToken':csrftoken\n    },\n    body:JSON.stringify({'completed':task.completed, 'title':task.title})\n  }).then(()=>{\n    this.fetchTasks()\n  })\n}\n\n\n  render() {\n\n    var tasks = this.state.todoList\n    var self = this\n    return (\n      <>\n        <div className=\"container\">\n          <div id=\"task-container\">\n            <div id=\"form-wrapper\">\n              <div className=\"form\">\n                <form onSubmit={this.handleSubmit} className=\"flex-wrapper\">\n                  <div className=\"\" style={{ flex: 6 }}>\n                    <input\n                      className=\"form-control\"\n                      id=\"title\"\n                      type=\"text\"\n                      name=\"title\"\n                      placeholder=\"Title\"\n                      onChange={this.handleChange}\n                      value={this.state.activeItem.title}\n                    />\n                  </div>\n\n                  <div className=\"\" style={{ flex: 1 }}>\n                    <input\n                      className=\"btn btn-warning\"\n                      type=\"submit\"\n                      name=\"add\"\n                    />\n                  </div>\n                </form>\n              </div>\n            </div>\n            <div id=\"list-wrapper\">\n\n{tasks.map(function(task, index){\n  return(\n   <div className=\"task-wrapper flex-wrapper\" key={index}>\n\n     <div onClick={()=> self.strikeUnstrike(task)} style={{flex:7}}>\n       {task.completed == false ? (\n <span>{task.title}</span>\n       )  : (\n        <strike>{task.title}</strike>\n       )\n      }\n    \n     </div>\n     <div style={{flex:1}}>\n    <button onClick={()=> self.startEdit(task)} className=\"btn btn-sm btn-outline-info\">Edit</button>\n     </div>\n     <div style={{flex:1}}>\n     <button onClick={()=> self.deleteItem(task)} className=\"btn btn-sm btn-outline-dark delete\">-</button>\n     </div>\n\n   </div>\n  )\n})}\n\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}